#include "../otpch.h"

#include "../const.h"
#include "../enums.h"
#include "../luaapi.h"
#include "../luascript.h"
#include "luaregister.h"

namespace {

using namespace tfs::lua;

// _G
int luaIsType(lua_State* L)
{
	// isType(derived, base)
	lua_getmetatable(L, -2);
	lua_getmetatable(L, -2);

	lua_rawgeti(L, -2, 'p');
	uint_fast8_t parentsB = getNumber<uint_fast8_t>(L, 1);

	lua_rawgeti(L, -3, 'h');
	size_t hashB = getNumber<size_t>(L, 1);

	lua_rawgeti(L, -3, 'p');
	uint_fast8_t parentsA = getNumber<uint_fast8_t>(L, 1);
	for (uint_fast8_t i = parentsA; i < parentsB; ++i) {
		lua_getfield(L, -3, "__index");
		lua_replace(L, -4);
	}

	lua_rawgeti(L, -4, 'h');
	size_t hashA = getNumber<size_t>(L, 1);

	pushBoolean(L, hashA == hashB);
	return 1;
}

int luaRawGetMetatable(lua_State* L)
{
	// rawgetmetatable(metatableName)
	luaL_getmetatable(L, getString(L, 1).c_str());
	return 1;
}

} // namespace

void tfs::lua::registerGlobals(LuaScriptInterface& lsi)
{
	// Enums
	registerEnum(lsi, ACCOUNT_TYPE_NORMAL);
	registerEnum(lsi, ACCOUNT_TYPE_TUTOR);
	registerEnum(lsi, ACCOUNT_TYPE_SENIORTUTOR);
	registerEnum(lsi, ACCOUNT_TYPE_GAMEMASTER);
	registerEnum(lsi, ACCOUNT_TYPE_COMMUNITYMANAGER);
	registerEnum(lsi, ACCOUNT_TYPE_GOD);

	registerEnum(lsi, AMMO_NONE);
	registerEnum(lsi, AMMO_BOLT);
	registerEnum(lsi, AMMO_ARROW);
	registerEnum(lsi, AMMO_SPEAR);
	registerEnum(lsi, AMMO_THROWINGSTAR);
	registerEnum(lsi, AMMO_THROWINGKNIFE);
	registerEnum(lsi, AMMO_STONE);
	registerEnum(lsi, AMMO_SNOWBALL);

	registerEnum(lsi, BUG_CATEGORY_MAP);
	registerEnum(lsi, BUG_CATEGORY_TYPO);
	registerEnum(lsi, BUG_CATEGORY_TECHNICAL);
	registerEnum(lsi, BUG_CATEGORY_OTHER);

	registerEnum(lsi, CALLBACK_PARAM_LEVELMAGICVALUE);
	registerEnum(lsi, CALLBACK_PARAM_SKILLVALUE);
	registerEnum(lsi, CALLBACK_PARAM_TARGETTILE);
	registerEnum(lsi, CALLBACK_PARAM_TARGETCREATURE);

	registerEnum(lsi, COMBAT_FORMULA_UNDEFINED);
	registerEnum(lsi, COMBAT_FORMULA_LEVELMAGIC);
	registerEnum(lsi, COMBAT_FORMULA_SKILL);
	registerEnum(lsi, COMBAT_FORMULA_DAMAGE);

	registerEnum(lsi, COMBAT_NONE);
	registerEnum(lsi, COMBAT_PHYSICALDAMAGE);
	registerEnum(lsi, COMBAT_ENERGYDAMAGE);
	registerEnum(lsi, COMBAT_EARTHDAMAGE);
	registerEnum(lsi, COMBAT_FIREDAMAGE);
	registerEnum(lsi, COMBAT_UNDEFINEDDAMAGE);
	registerEnum(lsi, COMBAT_LIFEDRAIN);
	registerEnum(lsi, COMBAT_MANADRAIN);
	registerEnum(lsi, COMBAT_HEALING);
	registerEnum(lsi, COMBAT_DROWNDAMAGE);
	registerEnum(lsi, COMBAT_ICEDAMAGE);
	registerEnum(lsi, COMBAT_HOLYDAMAGE);
	registerEnum(lsi, COMBAT_DEATHDAMAGE);

	registerEnum(lsi, COMBAT_PARAM_TYPE);
	registerEnum(lsi, COMBAT_PARAM_EFFECT);
	registerEnum(lsi, COMBAT_PARAM_DISTANCEEFFECT);
	registerEnum(lsi, COMBAT_PARAM_BLOCKSHIELD);
	registerEnum(lsi, COMBAT_PARAM_BLOCKARMOR);
	registerEnum(lsi, COMBAT_PARAM_TARGETCASTERORTOPMOST);
	registerEnum(lsi, COMBAT_PARAM_CREATEITEM);
	registerEnum(lsi, COMBAT_PARAM_AGGRESSIVE);
	registerEnum(lsi, COMBAT_PARAM_DISPEL);
	registerEnum(lsi, COMBAT_PARAM_USECHARGES);

	registerEnum(lsi, CONDITION_NONE);
	registerEnum(lsi, CONDITION_POISON);
	registerEnum(lsi, CONDITION_FIRE);
	registerEnum(lsi, CONDITION_ENERGY);
	registerEnum(lsi, CONDITION_BLEEDING);
	registerEnum(lsi, CONDITION_HASTE);
	registerEnum(lsi, CONDITION_PARALYZE);
	registerEnum(lsi, CONDITION_OUTFIT);
	registerEnum(lsi, CONDITION_INVISIBLE);
	registerEnum(lsi, CONDITION_LIGHT);
	registerEnum(lsi, CONDITION_MANASHIELD);
	registerEnum(lsi, CONDITION_MANASHIELD_BREAKABLE);
	registerEnum(lsi, CONDITION_INFIGHT);
	registerEnum(lsi, CONDITION_DRUNK);
	registerEnum(lsi, CONDITION_EXHAUST_WEAPON);
	registerEnum(lsi, CONDITION_REGENERATION);
	registerEnum(lsi, CONDITION_SOUL);
	registerEnum(lsi, CONDITION_DROWN);
	registerEnum(lsi, CONDITION_MUTED);
	registerEnum(lsi, CONDITION_CHANNELMUTEDTICKS);
	registerEnum(lsi, CONDITION_YELLTICKS);
	registerEnum(lsi, CONDITION_ATTRIBUTES);
	registerEnum(lsi, CONDITION_FREEZING);
	registerEnum(lsi, CONDITION_DAZZLED);
	registerEnum(lsi, CONDITION_CURSED);
	registerEnum(lsi, CONDITION_EXHAUST_COMBAT);
	registerEnum(lsi, CONDITION_EXHAUST_HEAL);
	registerEnum(lsi, CONDITION_PACIFIED);
	registerEnum(lsi, CONDITION_SPELLCOOLDOWN);
	registerEnum(lsi, CONDITION_SPELLGROUPCOOLDOWN);
	registerEnum(lsi, CONDITION_ROOT);

	registerEnum(lsi, CONDITIONID_DEFAULT);
	registerEnum(lsi, CONDITIONID_COMBAT);
	registerEnum(lsi, CONDITIONID_HEAD);
	registerEnum(lsi, CONDITIONID_NECKLACE);
	registerEnum(lsi, CONDITIONID_BACKPACK);
	registerEnum(lsi, CONDITIONID_ARMOR);
	registerEnum(lsi, CONDITIONID_RIGHT);
	registerEnum(lsi, CONDITIONID_LEFT);
	registerEnum(lsi, CONDITIONID_LEGS);
	registerEnum(lsi, CONDITIONID_FEET);
	registerEnum(lsi, CONDITIONID_RING);
	registerEnum(lsi, CONDITIONID_AMMO);

	registerEnum(lsi, CONDITION_PARAM_OWNER);
	registerEnum(lsi, CONDITION_PARAM_TICKS);
	registerEnum(lsi, CONDITION_PARAM_DRUNKENNESS);
	registerEnum(lsi, CONDITION_PARAM_HEALTHGAIN);
	registerEnum(lsi, CONDITION_PARAM_HEALTHTICKS);
	registerEnum(lsi, CONDITION_PARAM_MANAGAIN);
	registerEnum(lsi, CONDITION_PARAM_MANATICKS);
	registerEnum(lsi, CONDITION_PARAM_DELAYED);
	registerEnum(lsi, CONDITION_PARAM_SPEED);
	registerEnum(lsi, CONDITION_PARAM_LIGHT_LEVEL);
	registerEnum(lsi, CONDITION_PARAM_LIGHT_COLOR);
	registerEnum(lsi, CONDITION_PARAM_SOULGAIN);
	registerEnum(lsi, CONDITION_PARAM_SOULTICKS);
	registerEnum(lsi, CONDITION_PARAM_MINVALUE);
	registerEnum(lsi, CONDITION_PARAM_MAXVALUE);
	registerEnum(lsi, CONDITION_PARAM_STARTVALUE);
	registerEnum(lsi, CONDITION_PARAM_TICKINTERVAL);
	registerEnum(lsi, CONDITION_PARAM_FORCEUPDATE);
	registerEnum(lsi, CONDITION_PARAM_SKILL_MELEE);
	registerEnum(lsi, CONDITION_PARAM_SKILL_FIST);
	registerEnum(lsi, CONDITION_PARAM_SKILL_CLUB);
	registerEnum(lsi, CONDITION_PARAM_SKILL_SWORD);
	registerEnum(lsi, CONDITION_PARAM_SKILL_AXE);
	registerEnum(lsi, CONDITION_PARAM_SKILL_DISTANCE);
	registerEnum(lsi, CONDITION_PARAM_SKILL_SHIELD);
	registerEnum(lsi, CONDITION_PARAM_SKILL_FISHING);
	registerEnum(lsi, CONDITION_PARAM_STAT_MAXHITPOINTS);
	registerEnum(lsi, CONDITION_PARAM_STAT_MAXMANAPOINTS);
	registerEnum(lsi, CONDITION_PARAM_STAT_MAGICPOINTS);
	registerEnum(lsi, CONDITION_PARAM_STAT_MAXHITPOINTSPERCENT);
	registerEnum(lsi, CONDITION_PARAM_STAT_MAXMANAPOINTSPERCENT);
	registerEnum(lsi, CONDITION_PARAM_STAT_MAGICPOINTSPERCENT);
	registerEnum(lsi, CONDITION_PARAM_PERIODICDAMAGE);
	registerEnum(lsi, CONDITION_PARAM_SKILL_MELEEPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_FISTPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_CLUBPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_SWORDPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_AXEPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_DISTANCEPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_SHIELDPERCENT);
	registerEnum(lsi, CONDITION_PARAM_SKILL_FISHINGPERCENT);
	registerEnum(lsi, CONDITION_PARAM_BUFF_SPELL);
	registerEnum(lsi, CONDITION_PARAM_SUBID);
	registerEnum(lsi, CONDITION_PARAM_FIELD);
	registerEnum(lsi, CONDITION_PARAM_DISABLE_DEFENSE);
	registerEnum(lsi, CONDITION_PARAM_MANASHIELD_BREAKABLE);
	registerEnum(lsi, CONDITION_PARAM_SPECIALSKILL_CRITICALHITCHANCE);
	registerEnum(lsi, CONDITION_PARAM_SPECIALSKILL_CRITICALHITAMOUNT);
	registerEnum(lsi, CONDITION_PARAM_SPECIALSKILL_LIFELEECHCHANCE);
	registerEnum(lsi, CONDITION_PARAM_SPECIALSKILL_LIFELEECHAMOUNT);
	registerEnum(lsi, CONDITION_PARAM_SPECIALSKILL_MANALEECHCHANCE);
	registerEnum(lsi, CONDITION_PARAM_SPECIALSKILL_MANALEECHAMOUNT);
	registerEnum(lsi, CONDITION_PARAM_AGGRESSIVE);

	registerEnum(lsi, CONST_ME_NONE);
	registerEnum(lsi, CONST_ME_DRAWBLOOD);
	registerEnum(lsi, CONST_ME_LOSEENERGY);
	registerEnum(lsi, CONST_ME_POFF);
	registerEnum(lsi, CONST_ME_BLOCKHIT);
	registerEnum(lsi, CONST_ME_EXPLOSIONAREA);
	registerEnum(lsi, CONST_ME_EXPLOSIONHIT);
	registerEnum(lsi, CONST_ME_FIREAREA);
	registerEnum(lsi, CONST_ME_YELLOW_RINGS);
	registerEnum(lsi, CONST_ME_GREEN_RINGS);
	registerEnum(lsi, CONST_ME_HITAREA);
	registerEnum(lsi, CONST_ME_TELEPORT);
	registerEnum(lsi, CONST_ME_ENERGYHIT);
	registerEnum(lsi, CONST_ME_MAGIC_BLUE);
	registerEnum(lsi, CONST_ME_MAGIC_RED);
	registerEnum(lsi, CONST_ME_MAGIC_GREEN);
	registerEnum(lsi, CONST_ME_HITBYFIRE);
	registerEnum(lsi, CONST_ME_HITBYPOISON);
	registerEnum(lsi, CONST_ME_MORTAREA);
	registerEnum(lsi, CONST_ME_SOUND_GREEN);
	registerEnum(lsi, CONST_ME_SOUND_RED);
	registerEnum(lsi, CONST_ME_POISONAREA);
	registerEnum(lsi, CONST_ME_SOUND_YELLOW);
	registerEnum(lsi, CONST_ME_SOUND_PURPLE);
	registerEnum(lsi, CONST_ME_SOUND_BLUE);
	registerEnum(lsi, CONST_ME_SOUND_WHITE);
	registerEnum(lsi, CONST_ME_BUBBLES);
	registerEnum(lsi, CONST_ME_CRAPS);
	registerEnum(lsi, CONST_ME_GIFT_WRAPS);
	registerEnum(lsi, CONST_ME_FIREWORK_YELLOW);
	registerEnum(lsi, CONST_ME_FIREWORK_RED);
	registerEnum(lsi, CONST_ME_FIREWORK_BLUE);
	registerEnum(lsi, CONST_ME_STUN);
	registerEnum(lsi, CONST_ME_SLEEP);
	registerEnum(lsi, CONST_ME_WATERCREATURE);
	registerEnum(lsi, CONST_ME_GROUNDSHAKER);
	registerEnum(lsi, CONST_ME_HEARTS);
	registerEnum(lsi, CONST_ME_FIREATTACK);
	registerEnum(lsi, CONST_ME_ENERGYAREA);
	registerEnum(lsi, CONST_ME_SMALLCLOUDS);
	registerEnum(lsi, CONST_ME_HOLYDAMAGE);
	registerEnum(lsi, CONST_ME_BIGCLOUDS);
	registerEnum(lsi, CONST_ME_ICEAREA);
	registerEnum(lsi, CONST_ME_ICETORNADO);
	registerEnum(lsi, CONST_ME_ICEATTACK);
	registerEnum(lsi, CONST_ME_STONES);
	registerEnum(lsi, CONST_ME_SMALLPLANTS);
	registerEnum(lsi, CONST_ME_CARNIPHILA);
	registerEnum(lsi, CONST_ME_PURPLEENERGY);
	registerEnum(lsi, CONST_ME_YELLOWENERGY);
	registerEnum(lsi, CONST_ME_HOLYAREA);
	registerEnum(lsi, CONST_ME_BIGPLANTS);
	registerEnum(lsi, CONST_ME_CAKE);
	registerEnum(lsi, CONST_ME_GIANTICE);
	registerEnum(lsi, CONST_ME_WATERSPLASH);
	registerEnum(lsi, CONST_ME_PLANTATTACK);
	registerEnum(lsi, CONST_ME_TUTORIALARROW);
	registerEnum(lsi, CONST_ME_TUTORIALSQUARE);
	registerEnum(lsi, CONST_ME_MIRRORHORIZONTAL);
	registerEnum(lsi, CONST_ME_MIRRORVERTICAL);
	registerEnum(lsi, CONST_ME_SKULLHORIZONTAL);
	registerEnum(lsi, CONST_ME_SKULLVERTICAL);
	registerEnum(lsi, CONST_ME_ASSASSIN);
	registerEnum(lsi, CONST_ME_STEPSHORIZONTAL);
	registerEnum(lsi, CONST_ME_BLOODYSTEPS);
	registerEnum(lsi, CONST_ME_STEPSVERTICAL);
	registerEnum(lsi, CONST_ME_YALAHARIGHOST);
	registerEnum(lsi, CONST_ME_BATS);
	registerEnum(lsi, CONST_ME_SMOKE);
	registerEnum(lsi, CONST_ME_INSECTS);
	registerEnum(lsi, CONST_ME_DRAGONHEAD);
	registerEnum(lsi, CONST_ME_ORCSHAMAN);
	registerEnum(lsi, CONST_ME_ORCSHAMAN_FIRE);
	registerEnum(lsi, CONST_ME_THUNDER);
	registerEnum(lsi, CONST_ME_FERUMBRAS);
	registerEnum(lsi, CONST_ME_CONFETTI_HORIZONTAL);
	registerEnum(lsi, CONST_ME_CONFETTI_VERTICAL);
	registerEnum(lsi, CONST_ME_BLACKSMOKE);
	registerEnum(lsi, CONST_ME_REDSMOKE);
	registerEnum(lsi, CONST_ME_YELLOWSMOKE);
	registerEnum(lsi, CONST_ME_GREENSMOKE);
	registerEnum(lsi, CONST_ME_PURPLESMOKE);
	registerEnum(lsi, CONST_ME_EARLY_THUNDER);
	registerEnum(lsi, CONST_ME_RAGIAZ_BONECAPSULE);
	registerEnum(lsi, CONST_ME_CRITICAL_DAMAGE);
	registerEnum(lsi, CONST_ME_PLUNGING_FISH);
	registerEnum(lsi, CONST_ME_BLUECHAIN);
	registerEnum(lsi, CONST_ME_ORANGECHAIN);
	registerEnum(lsi, CONST_ME_GREENCHAIN);
	registerEnum(lsi, CONST_ME_PURPLECHAIN);
	registerEnum(lsi, CONST_ME_GREYCHAIN);
	registerEnum(lsi, CONST_ME_YELLOWCHAIN);
	registerEnum(lsi, CONST_ME_YELLOWSPARKLES);
	registerEnum(lsi, CONST_ME_FAEEXPLOSION);
	registerEnum(lsi, CONST_ME_FAECOMING);
	registerEnum(lsi, CONST_ME_FAEGOING);
	registerEnum(lsi, CONST_ME_BIGCLOUDSSINGLESPACE);
	registerEnum(lsi, CONST_ME_STONESSINGLESPACE);
	registerEnum(lsi, CONST_ME_BLUEGHOST);
	registerEnum(lsi, CONST_ME_POINTOFINTEREST);
	registerEnum(lsi, CONST_ME_MAPEFFECT);
	registerEnum(lsi, CONST_ME_PINKSPARK);
	registerEnum(lsi, CONST_ME_FIREWORK_GREEN);
	registerEnum(lsi, CONST_ME_FIREWORK_ORANGE);
	registerEnum(lsi, CONST_ME_FIREWORK_PURPLE);
	registerEnum(lsi, CONST_ME_FIREWORK_TURQUOISE);
	registerEnum(lsi, CONST_ME_THECUBE);
	registerEnum(lsi, CONST_ME_DRAWINK);
	registerEnum(lsi, CONST_ME_PRISMATICSPARKLES);
	registerEnum(lsi, CONST_ME_THAIAN);
	registerEnum(lsi, CONST_ME_THAIANGHOST);
	registerEnum(lsi, CONST_ME_GHOSTSMOKE);
	registerEnum(lsi, CONST_ME_FLOATINGBLOCK);
	registerEnum(lsi, CONST_ME_BLOCK);
	registerEnum(lsi, CONST_ME_ROOTING);
	registerEnum(lsi, CONST_ME_GHOSTLYSCRATCH);
	registerEnum(lsi, CONST_ME_GHOSTLYBITE);
	registerEnum(lsi, CONST_ME_BIGSCRATCHING);
	registerEnum(lsi, CONST_ME_SLASH);
	registerEnum(lsi, CONST_ME_BITE);
	registerEnum(lsi, CONST_ME_CHIVALRIOUSCHALLENGE);
	registerEnum(lsi, CONST_ME_DIVINEDAZZLE);
	registerEnum(lsi, CONST_ME_ELECTRICALSPARK);
	registerEnum(lsi, CONST_ME_PURPLETELEPORT);
	registerEnum(lsi, CONST_ME_REDTELEPORT);
	registerEnum(lsi, CONST_ME_ORANGETELEPORT);
	registerEnum(lsi, CONST_ME_GREYTELEPORT);
	registerEnum(lsi, CONST_ME_LIGHTBLUETELEPORT);
	registerEnum(lsi, CONST_ME_FATAL);
	registerEnum(lsi, CONST_ME_DODGE);
	registerEnum(lsi, CONST_ME_HOURGLASS);
	registerEnum(lsi, CONST_ME_FIREWORKSSTAR);
	registerEnum(lsi, CONST_ME_FIREWORKSCIRCLE);
	registerEnum(lsi, CONST_ME_FERUMBRAS_1);
	registerEnum(lsi, CONST_ME_GAZHARAGOTH);
	registerEnum(lsi, CONST_ME_MAD_MAGE);
	registerEnum(lsi, CONST_ME_HORESTIS);
	registerEnum(lsi, CONST_ME_DEVOVORGA);
	registerEnum(lsi, CONST_ME_FERUMBRAS_2);

	registerEnum(lsi, CONST_ANI_NONE);
	registerEnum(lsi, CONST_ANI_SPEAR);
	registerEnum(lsi, CONST_ANI_BOLT);
	registerEnum(lsi, CONST_ANI_ARROW);
	registerEnum(lsi, CONST_ANI_FIRE);
	registerEnum(lsi, CONST_ANI_ENERGY);
	registerEnum(lsi, CONST_ANI_POISONARROW);
	registerEnum(lsi, CONST_ANI_BURSTARROW);
	registerEnum(lsi, CONST_ANI_THROWINGSTAR);
	registerEnum(lsi, CONST_ANI_THROWINGKNIFE);
	registerEnum(lsi, CONST_ANI_SMALLSTONE);
	registerEnum(lsi, CONST_ANI_DEATH);
	registerEnum(lsi, CONST_ANI_LARGEROCK);
	registerEnum(lsi, CONST_ANI_SNOWBALL);
	registerEnum(lsi, CONST_ANI_POWERBOLT);
	registerEnum(lsi, CONST_ANI_POISON);
	registerEnum(lsi, CONST_ANI_INFERNALBOLT);
	registerEnum(lsi, CONST_ANI_HUNTINGSPEAR);
	registerEnum(lsi, CONST_ANI_ENCHANTEDSPEAR);
	registerEnum(lsi, CONST_ANI_REDSTAR);
	registerEnum(lsi, CONST_ANI_GREENSTAR);
	registerEnum(lsi, CONST_ANI_ROYALSPEAR);
	registerEnum(lsi, CONST_ANI_SNIPERARROW);
	registerEnum(lsi, CONST_ANI_ONYXARROW);
	registerEnum(lsi, CONST_ANI_PIERCINGBOLT);
	registerEnum(lsi, CONST_ANI_WHIRLWINDSWORD);
	registerEnum(lsi, CONST_ANI_WHIRLWINDAXE);
	registerEnum(lsi, CONST_ANI_WHIRLWINDCLUB);
	registerEnum(lsi, CONST_ANI_ETHEREALSPEAR);
	registerEnum(lsi, CONST_ANI_ICE);
	registerEnum(lsi, CONST_ANI_EARTH);
	registerEnum(lsi, CONST_ANI_HOLY);
	registerEnum(lsi, CONST_ANI_SUDDENDEATH);
	registerEnum(lsi, CONST_ANI_FLASHARROW);
	registerEnum(lsi, CONST_ANI_FLAMMINGARROW);
	registerEnum(lsi, CONST_ANI_SHIVERARROW);
	registerEnum(lsi, CONST_ANI_ENERGYBALL);
	registerEnum(lsi, CONST_ANI_SMALLICE);
	registerEnum(lsi, CONST_ANI_SMALLHOLY);
	registerEnum(lsi, CONST_ANI_SMALLEARTH);
	registerEnum(lsi, CONST_ANI_EARTHARROW);
	registerEnum(lsi, CONST_ANI_EXPLOSION);
	registerEnum(lsi, CONST_ANI_CAKE);
	registerEnum(lsi, CONST_ANI_TARSALARROW);
	registerEnum(lsi, CONST_ANI_VORTEXBOLT);
	registerEnum(lsi, CONST_ANI_PRISMATICBOLT);
	registerEnum(lsi, CONST_ANI_CRYSTALLINEARROW);
	registerEnum(lsi, CONST_ANI_DRILLBOLT);
	registerEnum(lsi, CONST_ANI_ENVENOMEDARROW);
	registerEnum(lsi, CONST_ANI_GLOOTHSPEAR);
	registerEnum(lsi, CONST_ANI_SIMPLEARROW);
	registerEnum(lsi, CONST_ANI_LEAFSTAR);
	registerEnum(lsi, CONST_ANI_DIAMONDARROW);
	registerEnum(lsi, CONST_ANI_SPECTRALBOLT);
	registerEnum(lsi, CONST_ANI_ROYALSTAR);
	registerEnum(lsi, CONST_ANI_WEAPONTYPE);

	registerEnum(lsi, MESSAGE_STATUS_DEFAULT);
	registerEnum(lsi, MESSAGE_STATUS_WARNING);
	registerEnum(lsi, MESSAGE_EVENT_ADVANCE);
	registerEnum(lsi, MESSAGE_STATUS_WARNING2);
	registerEnum(lsi, MESSAGE_STATUS_SMALL);
	registerEnum(lsi, MESSAGE_INFO_DESCR);
	registerEnum(lsi, MESSAGE_DAMAGE_DEALT);
	registerEnum(lsi, MESSAGE_DAMAGE_RECEIVED);
	registerEnum(lsi, MESSAGE_HEALED);
	registerEnum(lsi, MESSAGE_EXPERIENCE);
	registerEnum(lsi, MESSAGE_DAMAGE_OTHERS);
	registerEnum(lsi, MESSAGE_HEALED_OTHERS);
	registerEnum(lsi, MESSAGE_EXPERIENCE_OTHERS);
	registerEnum(lsi, MESSAGE_EVENT_DEFAULT);
	registerEnum(lsi, MESSAGE_LOOT);
	registerEnum(lsi, MESSAGE_TRADE);
	registerEnum(lsi, MESSAGE_GUILD);
	registerEnum(lsi, MESSAGE_PARTY_MANAGEMENT);
	registerEnum(lsi, MESSAGE_PARTY);
	registerEnum(lsi, MESSAGE_REPORT);
	registerEnum(lsi, MESSAGE_HOTKEY_PRESSED);
	registerEnum(lsi, MESSAGE_MARKET);
	registerEnum(lsi, MESSAGE_BEYOND_LAST);
	registerEnum(lsi, MESSAGE_TOURNAMENT_INFO);
	registerEnum(lsi, MESSAGE_ATTENTION);
	registerEnum(lsi, MESSAGE_BOOSTED_CREATURE);
	registerEnum(lsi, MESSAGE_OFFLINE_TRAINING);
	registerEnum(lsi, MESSAGE_TRANSACTION);

	registerEnum(lsi, CREATURETYPE_PLAYER);
	registerEnum(lsi, CREATURETYPE_MONSTER);
	registerEnum(lsi, CREATURETYPE_NPC);
	registerEnum(lsi, CREATURETYPE_SUMMON_OWN);
	registerEnum(lsi, CREATURETYPE_SUMMON_OTHERS);

	registerEnum(lsi, CLIENTOS_LINUX);
	registerEnum(lsi, CLIENTOS_WINDOWS);
	registerEnum(lsi, CLIENTOS_FLASH);
	registerEnum(lsi, CLIENTOS_OTCLIENT_LINUX);
	registerEnum(lsi, CLIENTOS_OTCLIENT_WINDOWS);
	registerEnum(lsi, CLIENTOS_OTCLIENT_MAC);

	registerEnum(lsi, ITEM_ATTRIBUTE_NONE);
	registerEnum(lsi, ITEM_ATTRIBUTE_ACTIONID);
	registerEnum(lsi, ITEM_ATTRIBUTE_UNIQUEID);
	registerEnum(lsi, ITEM_ATTRIBUTE_DESCRIPTION);
	registerEnum(lsi, ITEM_ATTRIBUTE_TEXT);
	registerEnum(lsi, ITEM_ATTRIBUTE_DATE);
	registerEnum(lsi, ITEM_ATTRIBUTE_WRITER);
	registerEnum(lsi, ITEM_ATTRIBUTE_NAME);
	registerEnum(lsi, ITEM_ATTRIBUTE_ARTICLE);
	registerEnum(lsi, ITEM_ATTRIBUTE_PLURALNAME);
	registerEnum(lsi, ITEM_ATTRIBUTE_WEIGHT);
	registerEnum(lsi, ITEM_ATTRIBUTE_ATTACK);
	registerEnum(lsi, ITEM_ATTRIBUTE_DEFENSE);
	registerEnum(lsi, ITEM_ATTRIBUTE_EXTRADEFENSE);
	registerEnum(lsi, ITEM_ATTRIBUTE_ARMOR);
	registerEnum(lsi, ITEM_ATTRIBUTE_HITCHANCE);
	registerEnum(lsi, ITEM_ATTRIBUTE_SHOOTRANGE);
	registerEnum(lsi, ITEM_ATTRIBUTE_OWNER);
	registerEnum(lsi, ITEM_ATTRIBUTE_DURATION);
	registerEnum(lsi, ITEM_ATTRIBUTE_DECAYSTATE);
	registerEnum(lsi, ITEM_ATTRIBUTE_CORPSEOWNER);
	registerEnum(lsi, ITEM_ATTRIBUTE_CHARGES);
	registerEnum(lsi, ITEM_ATTRIBUTE_FLUIDTYPE);
	registerEnum(lsi, ITEM_ATTRIBUTE_DOORID);
	registerEnum(lsi, ITEM_ATTRIBUTE_DECAYTO);
	registerEnum(lsi, ITEM_ATTRIBUTE_WRAPID);
	registerEnum(lsi, ITEM_ATTRIBUTE_STOREITEM);
	registerEnum(lsi, ITEM_ATTRIBUTE_ATTACK_SPEED);
	registerEnum(lsi, ITEM_ATTRIBUTE_OPENCONTAINER);

	registerEnum(lsi, ITEM_BROWSEFIELD);
	registerEnum(lsi, ITEM_BAG);
	registerEnum(lsi, ITEM_SHOPPING_BAG);
	registerEnum(lsi, ITEM_GOLD_COIN);
	registerEnum(lsi, ITEM_PLATINUM_COIN);
	registerEnum(lsi, ITEM_CRYSTAL_COIN);
	registerEnum(lsi, ITEM_AMULETOFLOSS);
	registerEnum(lsi, ITEM_PARCEL);
	registerEnum(lsi, ITEM_LABEL);
	registerEnum(lsi, ITEM_FIREFIELD_PVP_FULL);
	registerEnum(lsi, ITEM_FIREFIELD_PVP_MEDIUM);
	registerEnum(lsi, ITEM_FIREFIELD_PVP_SMALL);
	registerEnum(lsi, ITEM_FIREFIELD_PERSISTENT_FULL);
	registerEnum(lsi, ITEM_FIREFIELD_PERSISTENT_MEDIUM);
	registerEnum(lsi, ITEM_FIREFIELD_PERSISTENT_SMALL);
	registerEnum(lsi, ITEM_FIREFIELD_NOPVP);
	registerEnum(lsi, ITEM_FIREFIELD_NOPVP_MEDIUM);
	registerEnum(lsi, ITEM_POISONFIELD_PVP);
	registerEnum(lsi, ITEM_POISONFIELD_PERSISTENT);
	registerEnum(lsi, ITEM_POISONFIELD_NOPVP);
	registerEnum(lsi, ITEM_ENERGYFIELD_PVP);
	registerEnum(lsi, ITEM_ENERGYFIELD_PERSISTENT);
	registerEnum(lsi, ITEM_ENERGYFIELD_NOPVP);
	registerEnum(lsi, ITEM_MAGICWALL);
	registerEnum(lsi, ITEM_MAGICWALL_PERSISTENT);
	registerEnum(lsi, ITEM_MAGICWALL_SAFE);
	registerEnum(lsi, ITEM_WILDGROWTH);
	registerEnum(lsi, ITEM_WILDGROWTH_PERSISTENT);
	registerEnum(lsi, ITEM_WILDGROWTH_SAFE);
	registerEnum(lsi, ITEM_DECORATION_KIT);

	registerEnum(lsi, WIELDINFO_NONE);
	registerEnum(lsi, WIELDINFO_LEVEL);
	registerEnum(lsi, WIELDINFO_MAGLV);
	registerEnum(lsi, WIELDINFO_VOCREQ);
	registerEnum(lsi, WIELDINFO_PREMIUM);

	registerEnum(lsi, PlayerFlag_CannotUseCombat);
	registerEnum(lsi, PlayerFlag_CannotAttackPlayer);
	registerEnum(lsi, PlayerFlag_CannotAttackMonster);
	registerEnum(lsi, PlayerFlag_CannotBeAttacked);
	registerEnum(lsi, PlayerFlag_CanConvinceAll);
	registerEnum(lsi, PlayerFlag_CanSummonAll);
	registerEnum(lsi, PlayerFlag_CanIllusionAll);
	registerEnum(lsi, PlayerFlag_CanSenseInvisibility);
	registerEnum(lsi, PlayerFlag_IgnoredByMonsters);
	registerEnum(lsi, PlayerFlag_NotGainInFight);
	registerEnum(lsi, PlayerFlag_HasInfiniteMana);
	registerEnum(lsi, PlayerFlag_HasInfiniteSoul);
	registerEnum(lsi, PlayerFlag_HasNoExhaustion);
	registerEnum(lsi, PlayerFlag_CannotUseSpells);
	registerEnum(lsi, PlayerFlag_CannotPickupItem);
	registerEnum(lsi, PlayerFlag_CanAlwaysLogin);
	registerEnum(lsi, PlayerFlag_CanBroadcast);
	registerEnum(lsi, PlayerFlag_CanEditHouses);
	registerEnum(lsi, PlayerFlag_CannotBeBanned);
	registerEnum(lsi, PlayerFlag_CannotBePushed);
	registerEnum(lsi, PlayerFlag_HasInfiniteCapacity);
	registerEnum(lsi, PlayerFlag_CanPushAllCreatures);
	registerEnum(lsi, PlayerFlag_CanTalkRedPrivate);
	registerEnum(lsi, PlayerFlag_CanTalkRedChannel);
	registerEnum(lsi, PlayerFlag_TalkOrangeHelpChannel);
	registerEnum(lsi, PlayerFlag_NotGainExperience);
	registerEnum(lsi, PlayerFlag_NotGainMana);
	registerEnum(lsi, PlayerFlag_NotGainHealth);
	registerEnum(lsi, PlayerFlag_NotGainSkill);
	registerEnum(lsi, PlayerFlag_SetMaxSpeed);
	registerEnum(lsi, PlayerFlag_SpecialVIP);
	registerEnum(lsi, PlayerFlag_NotGenerateLoot);
	registerEnum(lsi, PlayerFlag_IgnoreProtectionZone);
	registerEnum(lsi, PlayerFlag_IgnoreSpellCheck);
	registerEnum(lsi, PlayerFlag_IgnoreWeaponCheck);
	registerEnum(lsi, PlayerFlag_CannotBeMuted);
	registerEnum(lsi, PlayerFlag_IsAlwaysPremium);
	registerEnum(lsi, PlayerFlag_IgnoreYellCheck);
	registerEnum(lsi, PlayerFlag_IgnoreSendPrivateCheck);

	registerEnum(lsi, PODIUM_SHOW_PLATFORM);
	registerEnum(lsi, PODIUM_SHOW_OUTFIT);
	registerEnum(lsi, PODIUM_SHOW_MOUNT);

	registerEnum(lsi, PLAYERSEX_FEMALE);
	registerEnum(lsi, PLAYERSEX_MALE);

	registerEnum(lsi, REPORT_REASON_NAMEINAPPROPRIATE);
	registerEnum(lsi, REPORT_REASON_NAMEPOORFORMATTED);
	registerEnum(lsi, REPORT_REASON_NAMEADVERTISING);
	registerEnum(lsi, REPORT_REASON_NAMEUNFITTING);
	registerEnum(lsi, REPORT_REASON_NAMERULEVIOLATION);
	registerEnum(lsi, REPORT_REASON_INSULTINGSTATEMENT);
	registerEnum(lsi, REPORT_REASON_SPAMMING);
	registerEnum(lsi, REPORT_REASON_ADVERTISINGSTATEMENT);
	registerEnum(lsi, REPORT_REASON_UNFITTINGSTATEMENT);
	registerEnum(lsi, REPORT_REASON_LANGUAGESTATEMENT);
	registerEnum(lsi, REPORT_REASON_DISCLOSURE);
	registerEnum(lsi, REPORT_REASON_RULEVIOLATION);
	registerEnum(lsi, REPORT_REASON_STATEMENT_BUGABUSE);
	registerEnum(lsi, REPORT_REASON_UNOFFICIALSOFTWARE);
	registerEnum(lsi, REPORT_REASON_PRETENDING);
	registerEnum(lsi, REPORT_REASON_HARASSINGOWNERS);
	registerEnum(lsi, REPORT_REASON_FALSEINFO);
	registerEnum(lsi, REPORT_REASON_ACCOUNTSHARING);
	registerEnum(lsi, REPORT_REASON_STEALINGDATA);
	registerEnum(lsi, REPORT_REASON_SERVICEATTACKING);
	registerEnum(lsi, REPORT_REASON_SERVICEAGREEMENT);

	registerEnum(lsi, REPORT_TYPE_NAME);
	registerEnum(lsi, REPORT_TYPE_STATEMENT);
	registerEnum(lsi, REPORT_TYPE_BOT);

	registerEnum(lsi, VOCATION_NONE);

	registerEnum(lsi, SKILL_FIST);
	registerEnum(lsi, SKILL_CLUB);
	registerEnum(lsi, SKILL_SWORD);
	registerEnum(lsi, SKILL_AXE);
	registerEnum(lsi, SKILL_DISTANCE);
	registerEnum(lsi, SKILL_SHIELD);
	registerEnum(lsi, SKILL_FISHING);
	registerEnum(lsi, SKILL_MAGLEVEL);
	registerEnum(lsi, SKILL_LEVEL);

	registerEnum(lsi, SPECIALSKILL_CRITICALHITCHANCE);
	registerEnum(lsi, SPECIALSKILL_CRITICALHITAMOUNT);
	registerEnum(lsi, SPECIALSKILL_LIFELEECHCHANCE);
	registerEnum(lsi, SPECIALSKILL_LIFELEECHAMOUNT);
	registerEnum(lsi, SPECIALSKILL_MANALEECHCHANCE);
	registerEnum(lsi, SPECIALSKILL_MANALEECHAMOUNT);

	registerEnum(lsi, STAT_MAXHITPOINTS);
	registerEnum(lsi, STAT_MAXMANAPOINTS);
	registerEnum(lsi, STAT_SOULPOINTS);
	registerEnum(lsi, STAT_MAGICPOINTS);

	registerEnum(lsi, SKULL_NONE);
	registerEnum(lsi, SKULL_YELLOW);
	registerEnum(lsi, SKULL_GREEN);
	registerEnum(lsi, SKULL_WHITE);
	registerEnum(lsi, SKULL_RED);
	registerEnum(lsi, SKULL_BLACK);
	registerEnum(lsi, SKULL_ORANGE);

	registerEnum(lsi, FLUID_NONE);
	registerEnum(lsi, FLUID_WATER);
	registerEnum(lsi, FLUID_BLOOD);
	registerEnum(lsi, FLUID_BEER);
	registerEnum(lsi, FLUID_SLIME);
	registerEnum(lsi, FLUID_LEMONADE);
	registerEnum(lsi, FLUID_MILK);
	registerEnum(lsi, FLUID_MANA);
	registerEnum(lsi, FLUID_LIFE);
	registerEnum(lsi, FLUID_OIL);
	registerEnum(lsi, FLUID_URINE);
	registerEnum(lsi, FLUID_COCONUTMILK);
	registerEnum(lsi, FLUID_WINE);
	registerEnum(lsi, FLUID_MUD);
	registerEnum(lsi, FLUID_FRUITJUICE);
	registerEnum(lsi, FLUID_LAVA);
	registerEnum(lsi, FLUID_RUM);
	registerEnum(lsi, FLUID_SWAMP);
	registerEnum(lsi, FLUID_TEA);
	registerEnum(lsi, FLUID_MEAD);

	registerEnum(lsi, TALKTYPE_SAY);
	registerEnum(lsi, TALKTYPE_WHISPER);
	registerEnum(lsi, TALKTYPE_YELL);
	registerEnum(lsi, TALKTYPE_PRIVATE_FROM);
	registerEnum(lsi, TALKTYPE_PRIVATE_TO);
	registerEnum(lsi, TALKTYPE_CHANNEL_Y);
	registerEnum(lsi, TALKTYPE_CHANNEL_O);
	registerEnum(lsi, TALKTYPE_SPELL);
	registerEnum(lsi, TALKTYPE_PRIVATE_NP);
	registerEnum(lsi, TALKTYPE_PRIVATE_NP_CONSOLE);
	registerEnum(lsi, TALKTYPE_PRIVATE_PN);
	registerEnum(lsi, TALKTYPE_BROADCAST);
	registerEnum(lsi, TALKTYPE_CHANNEL_R1);
	registerEnum(lsi, TALKTYPE_PRIVATE_RED_FROM);
	registerEnum(lsi, TALKTYPE_PRIVATE_RED_TO);
	registerEnum(lsi, TALKTYPE_MONSTER_SAY);
	registerEnum(lsi, TALKTYPE_MONSTER_YELL);
	registerEnum(lsi, TALKTYPE_POTION);

	registerEnum(lsi, TEXTCOLOR_BLUE);
	registerEnum(lsi, TEXTCOLOR_LIGHTGREEN);
	registerEnum(lsi, TEXTCOLOR_LIGHTBLUE);
	registerEnum(lsi, TEXTCOLOR_MAYABLUE);
	registerEnum(lsi, TEXTCOLOR_DARKRED);
	registerEnum(lsi, TEXTCOLOR_LIGHTGREY);
	registerEnum(lsi, TEXTCOLOR_SKYBLUE);
	registerEnum(lsi, TEXTCOLOR_PURPLE);
	registerEnum(lsi, TEXTCOLOR_ELECTRICPURPLE);
	registerEnum(lsi, TEXTCOLOR_RED);
	registerEnum(lsi, TEXTCOLOR_PASTELRED);
	registerEnum(lsi, TEXTCOLOR_ORANGE);
	registerEnum(lsi, TEXTCOLOR_YELLOW);
	registerEnum(lsi, TEXTCOLOR_WHITE_EXP);
	registerEnum(lsi, TEXTCOLOR_NONE);

	registerEnum(lsi, WEAPON_NONE);
	registerEnum(lsi, WEAPON_SWORD);
	registerEnum(lsi, WEAPON_CLUB);
	registerEnum(lsi, WEAPON_AXE);
	registerEnum(lsi, WEAPON_SHIELD);
	registerEnum(lsi, WEAPON_DISTANCE);
	registerEnum(lsi, WEAPON_WAND);
	registerEnum(lsi, WEAPON_AMMO);
	registerEnum(lsi, WEAPON_QUIVER);

	// Use with combat functions
	registerEnum(lsi, ORIGIN_NONE);
	registerEnum(lsi, ORIGIN_CONDITION);
	registerEnum(lsi, ORIGIN_SPELL);
	registerEnum(lsi, ORIGIN_MELEE);
	registerEnum(lsi, ORIGIN_RANGED);
	registerEnum(lsi, ORIGIN_WAND);

	// Use with npc:setSpeechBubble
	registerEnum(lsi, SPEECHBUBBLE_NONE);
	registerEnum(lsi, SPEECHBUBBLE_NORMAL);
	registerEnum(lsi, SPEECHBUBBLE_TRADE);
	registerEnum(lsi, SPEECHBUBBLE_QUEST);
	registerEnum(lsi, SPEECHBUBBLE_COMPASS);
	registerEnum(lsi, SPEECHBUBBLE_NORMAL2);
	registerEnum(lsi, SPEECHBUBBLE_NORMAL3);
	registerEnum(lsi, SPEECHBUBBLE_HIRELING);

	// Use with player:addMapMark
	registerEnum(lsi, MAPMARK_TICK);
	registerEnum(lsi, MAPMARK_QUESTION);
	registerEnum(lsi, MAPMARK_EXCLAMATION);
	registerEnum(lsi, MAPMARK_STAR);
	registerEnum(lsi, MAPMARK_CROSS);
	registerEnum(lsi, MAPMARK_TEMPLE);
	registerEnum(lsi, MAPMARK_KISS);
	registerEnum(lsi, MAPMARK_SHOVEL);
	registerEnum(lsi, MAPMARK_SWORD);
	registerEnum(lsi, MAPMARK_FLAG);
	registerEnum(lsi, MAPMARK_LOCK);
	registerEnum(lsi, MAPMARK_BAG);
	registerEnum(lsi, MAPMARK_SKULL);
	registerEnum(lsi, MAPMARK_DOLLAR);
	registerEnum(lsi, MAPMARK_REDNORTH);
	registerEnum(lsi, MAPMARK_REDSOUTH);
	registerEnum(lsi, MAPMARK_REDEAST);
	registerEnum(lsi, MAPMARK_REDWEST);
	registerEnum(lsi, MAPMARK_GREENNORTH);
	registerEnum(lsi, MAPMARK_GREENSOUTH);

	// Use with Game.getReturnMessage
	registerEnum(lsi, RETURNVALUE_NOERROR);
	registerEnum(lsi, RETURNVALUE_NOTPOSSIBLE);
	registerEnum(lsi, RETURNVALUE_NOTENOUGHROOM);
	registerEnum(lsi, RETURNVALUE_PLAYERISPZLOCKED);
	registerEnum(lsi, RETURNVALUE_PLAYERISNOTINVITED);
	registerEnum(lsi, RETURNVALUE_CANNOTTHROW);
	registerEnum(lsi, RETURNVALUE_THEREISNOWAY);
	registerEnum(lsi, RETURNVALUE_DESTINATIONOUTOFREACH);
	registerEnum(lsi, RETURNVALUE_CREATUREBLOCK);
	registerEnum(lsi, RETURNVALUE_NOTMOVEABLE);
	registerEnum(lsi, RETURNVALUE_DROPTWOHANDEDITEM);
	registerEnum(lsi, RETURNVALUE_BOTHHANDSNEEDTOBEFREE);
	registerEnum(lsi, RETURNVALUE_CANONLYUSEONEWEAPON);
	registerEnum(lsi, RETURNVALUE_NEEDEXCHANGE);
	registerEnum(lsi, RETURNVALUE_CANNOTBEDRESSED);
	registerEnum(lsi, RETURNVALUE_PUTTHISOBJECTINYOURHAND);
	registerEnum(lsi, RETURNVALUE_PUTTHISOBJECTINBOTHHANDS);
	registerEnum(lsi, RETURNVALUE_TOOFARAWAY);
	registerEnum(lsi, RETURNVALUE_FIRSTGODOWNSTAIRS);
	registerEnum(lsi, RETURNVALUE_FIRSTGOUPSTAIRS);
	registerEnum(lsi, RETURNVALUE_CONTAINERNOTENOUGHROOM);
	registerEnum(lsi, RETURNVALUE_NOTENOUGHCAPACITY);
	registerEnum(lsi, RETURNVALUE_CANNOTPICKUP);
	registerEnum(lsi, RETURNVALUE_THISISIMPOSSIBLE);
	registerEnum(lsi, RETURNVALUE_DEPOTISFULL);
	registerEnum(lsi, RETURNVALUE_CREATUREDOESNOTEXIST);
	registerEnum(lsi, RETURNVALUE_CANNOTUSETHISOBJECT);
	registerEnum(lsi, RETURNVALUE_PLAYERWITHTHISNAMEISNOTONLINE);
	registerEnum(lsi, RETURNVALUE_NOTREQUIREDLEVELTOUSERUNE);
	registerEnum(lsi, RETURNVALUE_YOUAREALREADYTRADING);
	registerEnum(lsi, RETURNVALUE_THISPLAYERISALREADYTRADING);
	registerEnum(lsi, RETURNVALUE_YOUMAYNOTLOGOUTDURINGAFIGHT);
	registerEnum(lsi, RETURNVALUE_DIRECTPLAYERSHOOT);
	registerEnum(lsi, RETURNVALUE_NOTENOUGHLEVEL);
	registerEnum(lsi, RETURNVALUE_NOTENOUGHMAGICLEVEL);
	registerEnum(lsi, RETURNVALUE_NOTENOUGHMANA);
	registerEnum(lsi, RETURNVALUE_NOTENOUGHSOUL);
	registerEnum(lsi, RETURNVALUE_YOUAREEXHAUSTED);
	registerEnum(lsi, RETURNVALUE_YOUCANNOTUSEOBJECTSTHATFAST);
	registerEnum(lsi, RETURNVALUE_PLAYERISNOTREACHABLE);
	registerEnum(lsi, RETURNVALUE_CANONLYUSETHISRUNEONCREATURES);
	registerEnum(lsi, RETURNVALUE_ACTIONNOTPERMITTEDINPROTECTIONZONE);
	registerEnum(lsi, RETURNVALUE_YOUMAYNOTATTACKTHISPLAYER);
	registerEnum(lsi, RETURNVALUE_YOUMAYNOTATTACKAPERSONINPROTECTIONZONE);
	registerEnum(lsi, RETURNVALUE_YOUMAYNOTATTACKAPERSONWHILEINPROTECTIONZONE);
	registerEnum(lsi, RETURNVALUE_YOUMAYNOTATTACKTHISCREATURE);
	registerEnum(lsi, RETURNVALUE_YOUCANONLYUSEITONCREATURES);
	registerEnum(lsi, RETURNVALUE_CREATUREISNOTREACHABLE);
	registerEnum(lsi, RETURNVALUE_TURNSECUREMODETOATTACKUNMARKEDPLAYERS);
	registerEnum(lsi, RETURNVALUE_YOUNEEDPREMIUMACCOUNT);
	registerEnum(lsi, RETURNVALUE_YOUNEEDTOLEARNTHISSPELL);
	registerEnum(lsi, RETURNVALUE_YOURVOCATIONCANNOTUSETHISSPELL);
	registerEnum(lsi, RETURNVALUE_YOUNEEDAWEAPONTOUSETHISSPELL);
	registerEnum(lsi, RETURNVALUE_PLAYERISPZLOCKEDLEAVEPVPZONE);
	registerEnum(lsi, RETURNVALUE_PLAYERISPZLOCKEDENTERPVPZONE);
	registerEnum(lsi, RETURNVALUE_ACTIONNOTPERMITTEDINANOPVPZONE);
	registerEnum(lsi, RETURNVALUE_YOUCANNOTLOGOUTHERE);
	registerEnum(lsi, RETURNVALUE_YOUNEEDAMAGICITEMTOCASTSPELL);
	registerEnum(lsi, RETURNVALUE_NAMEISTOOAMBIGUOUS);
	registerEnum(lsi, RETURNVALUE_CANONLYUSEONESHIELD);
	registerEnum(lsi, RETURNVALUE_NOPARTYMEMBERSINRANGE);
	registerEnum(lsi, RETURNVALUE_YOUARENOTTHEOWNER);
	registerEnum(lsi, RETURNVALUE_TRADEPLAYERFARAWAY);
	registerEnum(lsi, RETURNVALUE_YOUDONTOWNTHISHOUSE);
	registerEnum(lsi, RETURNVALUE_TRADEPLAYERALREADYOWNSAHOUSE);
	registerEnum(lsi, RETURNVALUE_TRADEPLAYERHIGHESTBIDDER);
	registerEnum(lsi, RETURNVALUE_YOUCANNOTTRADETHISHOUSE);
	registerEnum(lsi, RETURNVALUE_YOUDONTHAVEREQUIREDPROFESSION);
	registerEnum(lsi, RETURNVALUE_YOUCANNOTUSETHISBED);

	registerEnum(lsi, RELOAD_TYPE_ALL);
	registerEnum(lsi, RELOAD_TYPE_ACTIONS);
	registerEnum(lsi, RELOAD_TYPE_CHAT);
	registerEnum(lsi, RELOAD_TYPE_CONFIG);
	registerEnum(lsi, RELOAD_TYPE_CREATURESCRIPTS);
	registerEnum(lsi, RELOAD_TYPE_EVENTS);
	registerEnum(lsi, RELOAD_TYPE_GLOBAL);
	registerEnum(lsi, RELOAD_TYPE_GLOBALEVENTS);
	registerEnum(lsi, RELOAD_TYPE_ITEMS);
	registerEnum(lsi, RELOAD_TYPE_MONSTERS);
	registerEnum(lsi, RELOAD_TYPE_MOUNTS);
	registerEnum(lsi, RELOAD_TYPE_MOVEMENTS);
	registerEnum(lsi, RELOAD_TYPE_NPCS);
	registerEnum(lsi, RELOAD_TYPE_QUESTS);
	registerEnum(lsi, RELOAD_TYPE_RAIDS);
	registerEnum(lsi, RELOAD_TYPE_SCRIPTS);
	registerEnum(lsi, RELOAD_TYPE_SPELLS);
	registerEnum(lsi, RELOAD_TYPE_TALKACTIONS);
	registerEnum(lsi, RELOAD_TYPE_WEAPONS);

	registerEnum(lsi, SPELL_INSTANT);
	registerEnum(lsi, SPELL_RUNE);

	registerEnum(lsi, MONSTERS_EVENT_THINK);
	registerEnum(lsi, MONSTERS_EVENT_APPEAR);
	registerEnum(lsi, MONSTERS_EVENT_DISAPPEAR);
	registerEnum(lsi, MONSTERS_EVENT_MOVE);
	registerEnum(lsi, MONSTERS_EVENT_SAY);

	// _G
	lsi.registerGlobalBoolean("VIRTUAL_PARENT", true);

	lsi.registerGlobalMethod("isType", luaIsType);
	lsi.registerGlobalMethod("rawgetmetatable", luaRawGetMetatable);
}
